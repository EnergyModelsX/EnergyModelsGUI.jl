name: CI
on:
  push:
    branches:
      - main
      - release-*
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Since EnergyModelsGUI doesn't have binary dependencies, 
        # only test on a subset of possible platforms.
        include:
          - version: '1'  # The latest point-release (Linux)
            os: ubuntu-latest
            arch: x64
          - version: '1'  # The latest point-release (Windows)
            os: windows-latest
            arch: x64
          - version: 'lts'  # lts 
            os: ubuntu-latest
            arch: x64
          - version: 'lts'  # lts
            os: ubuntu-latest
            arch: x86
          # - version: 'nightly'
          #   os: ubuntu-latest
          #   arch: x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v3
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: Install Dependencies (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update && sudo apt-get install -y xorg-dev mesa-utils xvfb libgl1 freeglut3-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev xsettingsd x11-xserver-utils
      - name: Install Dependencies (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          ## Install Visual C++ Build Tools
          choco install visualcpp-build-tools -y
          ## Install additional dependencies if needed
          choco install directx -y
        shell: pwsh
      - name: Set OpenGL Environment
        if: ${{ matrix.os == 'windows-latest' }}
        shell: cmd
        run: |
          setx PATH "%PATH%;C:\Windows\System32"
          setx OPENGL_HOME "C:\Windows\System32"
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        with:
          depwarn: error