stages:
  - test
  - deploy


before_script:
  # Install git.
  - apt-get update -qq && apt-get install -y git
  - apt-get install -y xorg-dev mesa-utils xvfb libgl1 freeglut3-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev

  # Install ssh-agent and add the private key.
  - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
  - eval $(ssh-agent -s)
  - echo "$PRIVATE_DEPLOY_KEY_EMB" | tr -d '\r' | ssh-add -

  # Set up the .ssh directory.
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  # Set the known_hosts to a variable containing the public key of gitlab.sintef.no
  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  # Test the ssh connection.
  - ssh -T -X git@gitlab.sintef.no

  # Add the Clean Export internal registry and the public General registry.
  - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "git@gitlab.sintef.no:clean_export/registrycleanexport.git"))'
  - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "git@gitlab.sintef.no:julia-one-sintef/onesintef.git"))'
  - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "https://github.com/JuliaRegistries/General"))'


# Below is the template to run the tests in Julia
.test_template: &test_definition
  stage: test
  script:
    - echo "Run tests"
    - julia -e 'using Pkg; Pkg.Registry.status()'
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. -e 'using Pkg; Pkg.Registry.status()'
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. --code-coverage=user -e "using Pkg; Pkg.test(; coverage = true)"
  rules:
    - when: always
  

test:1.10:
  image: julia:1.10
  <<: *test_definition

# Test that the pages compile, without making it public. Only runs on merge requests.
test:pages:
  image: julia:1.10
  stage: test
  script:
    - cd docs
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. -e 'using Pkg; Pkg.Registry.status()'
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. -e 'using Pkg; Pkg.develop(path="..")'  # install the version that is pushed
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. -e 'using Pkg; Pkg.add("Documenter")'   # install Documenter
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. --color=yes make.jl  # make documentation
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Deploy the documentation.
pages:
  image: julia:1.10
  stage: deploy
  script:
    - cd docs
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. -e 'using Pkg; Pkg.Registry.status()'
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. -e 'using Pkg; Pkg.develop(path="..")'  # install the version that is pushed
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. -e 'using Pkg; Pkg.add("Documenter")'  # install Documenter
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=. --color=yes make.jl  # make documentation
    - cd ..
    - mv docs/build public  # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  rules:
    # Only execute this on the default branch and on merge requests.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# Register version
register:
  image: julia:1.10
  stage: deploy
  script:
    - julia -e 'using Pkg; Pkg.Registry.status()'
    # Set name and email for the bot pushing to the registry
    - git config --global user.email "<@>"
    - git config --global user.name "Registrator"

    #Install LocalRegistry used for pushing to registry
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project="test" -e 'using Pkg; Pkg.add("LocalRegistry")' 
    
    #Install dependencies
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project="test" -e 'using Pkg; Pkg.instantiate()' 
     
     # Check for any changes. If changes exist, commit them.
    - "git diff --quiet || (git add . && git commit -m 'CI: Auto-commit changes' && git push)"
    
    # Register the package. LocalRegistry will not register a new version if it is already registered.
    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project="test" -e 'using LocalRegistry;
        repo = "git@gitlab.sintef.no:" * ENV["CI_PROJECT_PATH"] * ".git";
        registry =  "git@gitlab.sintef.no:clean_export/registrycleanexport.git";
        register(repo=repo, registry = registry, create_gitlab_mr=true, ignore_reregistration = true)'  # register the package
  rules:
    # Only execute this on the default branch.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
