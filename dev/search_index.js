var documenterSearchIndex = {"docs":
[{"location":"manual/simple-example/#Examples","page":"Example","title":"Examples","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"For the content of the individual examples, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Example","title":"The package is installed with ]Â add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"From the Julia REPL (i.e, command-line in julia; julia>), run","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"# Starts the Julia REPL\nusing Pkg\nusing EnergyModelsGUI\n\n# Get the path of the examples directory\nexdir = joinpath(pkgdir(EnergyModelsGUI), \"examples\")\n\n# Activate project for the examples in the EnergyModelsGUI repository\nPkg.activate(exdir)\nPkg.instantiate()\n\n# Include the code into the Julia REPL to run the following example\ninclude(joinpath(exdir, \"EMI_geography.jl\"))","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"You should then get the following GUI: (Image: Example image for GUI)","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"To the left you here get a visualization of the topology. This window provide the following functionality:","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"You can move a Node/Area by holding down the left mouse button and dragging to the desired location (at which you then release the left mouse button). The Links/Transmissions to this Node/Area will be updated as well.\nSelecting a Node/Area/link/Transmission (by left-clicking) will print information about this object in the box on the top right. The selected object will have a green line style.\nYou can select multiple nodes/areas by holding down ctrl and left-clicking.\nYou can change the focus area (pan) of the window by holding down the right mouse button and dragging.\nYou can zoome in and out by using the scroll wheel on the mouse.\nHovering a component will show the type of this component.","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"The toolbar on top provides the following functionality:","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"back: If you are using the EnergyModelsGeography package as in this example, you can here navigate back to the Top level if you are currently in an area (opened by the open button, see below). This button has the keyboard shortcut MouseButton4 (or Esc).\nopen: If you are using the EnergyModelsGeography package as in this example, you can open an area by first selecting the area to open and then clicking this button. This button has the keyboard shortcut space. Opening an area can also be accomplished by double clicking this area icon.\nalign horz.: This enables you to align selected nodes/areas horizontally.\nalign vert.: This enables you to align selected nodes/areas vertically.\nsave: This button saves the coordinates of the Nodes/Areas to file (files if there are multiple areas; a single file for each area in addition to a file for the Top level). The location of these files can be assigned through the design_path input parameter to the GUI function.\nreset view: Resets the view to the optimal view based on the current system if the view has been altered.\nExapnd all: You can toggle this on to show all components of all Areas\nPeriod: Use this menu to choose a StrategicPeriod of your case\nScenario: Use this menu to choose a Scenario of your case\nRepresentative period: Use this menu to choose a RepresentativePeriod of your case\nData: Use this menu to select the available data to be visualized in the plot area to the bottom right (if a component is selected, the menu will update to contain the available data for this component).","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"An additional toolbar on the bottom right is related to the plot area above and has the following functionality:","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"Plot: This menu enables activation of one of the three available plots one for StrategicPeriod, one for RepresentativePeriod and one for OperationalPeriod.\npin current data: Clicking this button pins the lastly plotted data which enables comparing with other data in the same time type\nremove selected data: A plot can be selected by left-click and can then be removed by clicking this button\nExport: Choose if you want to export all data (or entire window) in the option All or the current active plots (Plots).\nThis menu enables you to choose the format of the export (you can also print the data to the REPL by using the REPL option here).\nexport: This button finally exports the data using the setup in the previous two menus.","category":"page"},{"location":"how-to/export-results/#export_results","page":"Export results","title":"Export results","text":"","category":"section"},{"location":"how-to/export-results/","page":"Export results","title":"Export results","text":"The GUI enables simple printing of the results to the REPL, but one can also export to file. In order to do this, you needs to provide the path to which the files can be exported. This is done with the keyword input argument path_to_results as follows","category":"page"},{"location":"how-to/export-results/","page":"Export results","title":"Export results","text":"gui = GUI(case; path_to_results);","category":"page"},{"location":"how-to/export-results/","page":"Export results","title":"Export results","text":"In the opened GUI you will now be able to export results to different file formats. It is here possible to export All to an .xlsx file where each JuMP variable will be stored in a separate excel sheet.","category":"page"},{"location":"how-to/customize-colors/#customize_colors","page":"Customize colors","title":"Customize colors","text":"","category":"section"},{"location":"how-to/customize-colors/","page":"Customize colors","title":"Customize colors","text":"EnergyModelsGUI provides a set of colors for a set of frequently used Resource-ids. These can be found in src/colors.toml. If you have a Resource with another id or you want to alter the default colors, you need to specify the id_to_color_map option in the GUI function.","category":"page"},{"location":"how-to/customize-colors/","page":"Customize colors","title":"Customize colors","text":"Say that your case[:products] contains the following products","category":"page"},{"location":"how-to/customize-colors/","page":"Customize colors","title":"Customize colors","text":"NG     = ResourceEmit(\"NG\", 0.2)\nCoal   = ResourceCarrier(\"Coal\", 0.35)\nPower  = ResourceCarrier(\"Power\", 0.)\nnew_id = ResourceEmit(\"NewID\",1.)","category":"page"},{"location":"how-to/customize-colors/","page":"Customize colors","title":"Customize colors","text":"and you want to alter the color of Coal and provide a custom color for the new ResourceEmit with id NewID, then simply do the following (colors can be a string in hex format or a symbol representing a named color from the Colors.jl package):","category":"page"},{"location":"how-to/customize-colors/","page":"Customize colors","title":"Customize colors","text":"id_to_color_map = Dict(new_id.id => :yellow, NG.id => \"#FF9876\")\ngui = GUI(case; id_to_color_map);","category":"page"},{"location":"manual/quick-start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install the most recent version of [Julia], preferably using the Juliaup version multiplexer (https://github.com/JuliaLang/juliaup)\nInstall the package EnergyModelsGUI by running:\n] add EnergyModelsGUI","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"note: Note\nUtilizing EnergyModelsGUI requires the declaration of cases in EnergyModelsX. To this end, you also have to add the packages EnergyModelsBase and potentially EnergyModelsGeography and EnergyModelsInvestments to create your energy model cases first.","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"If you already have constructed a case in EMX you can view this case with","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"using EnergyModelsGUI\n\nGUI(case)","category":"page"},{"location":"manual/philosophy/#Philosophy","page":"Philosophy","title":"Philosophy","text":"","category":"section"},{"location":"manual/philosophy/#General-design-philosophy","page":"Philosophy","title":"General design philosophy","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"One key aim in the development of EnergyModelsGUI was to create a graphical user interface that","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"visualizes the topology and result from EnergyModelsX,\ndraws inspiration from the integrate framework for visualization of energy systems, and\nhas a simple architecture that minimizes dependencies on major packages.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"EnergyModelsGUI is hence focusing of providing the user with a simple interface to both visualize the created energy system and the results, if a JuMP.model is added. Its aim is not to provide the user with an input processing routine or a method for generating figures that can be directly used in publications.","category":"page"},{"location":"manual/philosophy/#Incorporation-of-EnergyModelsGUI-to-your-EMX-extension-package","page":"Philosophy","title":"Incorporation of EnergyModelsGUI to your EMX extension package","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"EnergyModelsGUI should by default be able to work with potential extension packages as it is only dependent on the case dictionary description and the variable names. However, you can provide an extension to EnergyModelsGUI in your EMX package with, e.g., specific icons for the developed nodes. In addition, if your package introduces new variables, you can provide a description of the variables in your package.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"warning: Warning\nProviding new names to the variables in its current form is a bit complicated. You have to provide a file descriptive_names.yml for including descriptive names for both parameters of composite types and variables. This file should include all existing names as it is only read one.We aim in a future version to utilize a different approach in which the both the fields of types and introduced variables are provided as entries to a dictionary. In this situation, it is no longer necessary to copy the existing file.","category":"page"},{"location":"how-to/customize-icons/#customize_icons","page":"Customize icons","title":"Customize icons","text":"","category":"section"},{"location":"how-to/customize-icons/","page":"Customize icons","title":"Customize icons","text":"EnergyModelsGUI provides default icon generation for Nodes and Areas, but these \"icons\" can be customized by the users. You can define an icon based on a Node id or by types. To do this you need to specify the id_to_icon_map option in the GUI function. Say that you want to specify default icons for the types Source, NetworkNode and Sink, and you want to have a special icon for the Node with id 7, then simply do the following","category":"page"},{"location":"how-to/customize-icons/","page":"Customize icons","title":"Customize icons","text":"const EMB = EnergyModelsBase\nid_to_icon_map = Dict(\n    EMB.Source => \"Source\",\n    EMB.NetworkNode => \"Network\",\n    EMB.Sink => \"Sink\",\n    7 => \"factory_emissions\"\n)\n\n# Update id_to_icon_map with full paths for the icons\nid_to_icon_map = set_icons(id_to_icon_map)\n\ngui = GUI(case; id_to_icon_map);","category":"page"},{"location":"how-to/customize-icons/","page":"Customize icons","title":"Customize icons","text":"If the string provided is a full path to a .png file, the GUI will use this file. If the string is simply the name of the file (without the .png ending) as above, the GUI will first look for a file in a folder ../icons. If it is not provided here, it will look in the ext/EMGUIExt/icons/ folder in the EMX repositories. If the icon is not found here either, it will fall back to the default icon generation mention earlier (based on simple shapes like circle for Sinks and squares for Sources and colored by input/output colors).","category":"page"},{"location":"how-to/save-design/#save_design","page":"Save design to file","title":"Save design to file","text":"","category":"section"},{"location":"how-to/save-design/","page":"Save design to file","title":"Save design to file","text":"EnergyModelsGUI enables an interactive framework for moving nodes in a topology which can be saved to file. To save the coordinates to file the design_path argument must be provided as follows","category":"page"},{"location":"how-to/save-design/","page":"Save design to file","title":"Save design to file","text":"gui = GUI(case; design_path);","category":"page"},{"location":"how-to/save-design/","page":"Save design to file","title":"Save design to file","text":"where the variable design_path is where you want to store your updated design coordinates. You can then simply use the save button in the GUI after running the application (for example using one of the examples in the repository). Next time you run the GUI, it will use the updated coordinates.","category":"page"},{"location":"library/internals/reference/#Internals","page":"Reference","title":"Internals","text":"","category":"section"},{"location":"library/internals/reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"library/internals/reference/#Types","page":"Reference","title":"Types","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Modules = [EnergyModelsGUI]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"library/internals/reference/#EnergyModelsGUI.Connection","page":"Reference","title":"EnergyModelsGUI.Connection","text":"Mutable type for providing a flexible data structure for connections between EnergySystemDesigns.\n\nFields\n\nfrom::EnergySystemDesign is the EnergySystemDesign from which the connection originates.\nto::EnergySystemDesign is the EnergySystemDesign to which the connection is linked to.\nconnection::Union{EMB.Link,EMG.Transmission} is the EMX connection structure.\ncolors::Vector{RGB} is the associated colors of the connection\nplots::Vector{Any} is a vector with all Makie object associated with this object\n\n\n\n\n\n","category":"type"},{"location":"library/internals/reference/#Methods","page":"Reference","title":"Methods","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Modules = [EnergyModelsGUI]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"library/internals/reference/#Base.show-Tuple{IO, EnergyModelsGUI.Connection}","page":"Reference","title":"Base.show","text":"show(io::IO, con::Connection)\n\nPrint a simplified overview of the fields of a Connection obj.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#Base.show-Tuple{IO, EnergySystemDesign}","page":"Reference","title":"Base.show","text":"show(io::IO, obj::EnergySystemDesign)\n\nPrint a simplified overview of the fields of an EnergySystemDesign obj.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#Base.show-Tuple{IO, GUI}","page":"Reference","title":"Base.show","text":"show(io::IO, obj::GUI)\n\nPrint a simplified overview of the fields of a GUI gui.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.add_component!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.add_component!","text":"add_component!(gui::GUI, component::EnergySystemDesign)\n\nDraw a box containing the icon and add a label with the id of the EnergySystemDesign component with its type in parantheses.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.add_description!-Tuple{Any, String, String, String, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}, Vector{Dict}, GUI}","page":"Reference","title":"EnergyModelsGUI.add_description!","text":"add_description!(\n    field::Any,\n    name::String,\n    key_str::String,\n    pre_desc::String,\n    node::Plotable,\n    available_data::Vector{Dict},\n    gui::GUI,\n)\n\nUpdate the container with a description if available, and add description to available_data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.add_description!-Tuple{Dict, String, String, String, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}, Vector{Dict}, GUI}","page":"Reference","title":"EnergyModelsGUI.add_description!","text":"add_description!(\n    field::Dict,\n    name::String,\n    key_str::String,\n    pre_desc::String,\n    node::Plotable,\n    available_data::Vector{Dict},\n    gui::GUI,\n)\n\nUpdate the container with a description if available, and add description to available_data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.add_description!-Tuple{Vector, String, String, String, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}, Vector{Dict}, GUI}","page":"Reference","title":"EnergyModelsGUI.add_description!","text":"add_description!(\n    field::Vector,\n    name::String,\n    key_str::String,\n    pre_desc::String,\n    node::Plotable,\n    available_data::Vector{Dict},\n    gui::GUI,\n)\n\nIf field is a vector, loop through the vector and update the container with a description if available, and add description to available_data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.add_description!-Tuple{Vector{Dict}, Dict{Symbol, Any}, GUI, String}","page":"Reference","title":"EnergyModelsGUI.add_description!","text":"add_description!(\n    available_data::Vector{Dict},\n    container::Dict{Symbol,Any},\n    gui::GUI,\n    key_str::String;\n    pre_desc::String=\"\",\n)\n\nUpdate the container with a description if available, and add container to available_data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.add_description!-Union{Tuple{T}, Tuple{T, String, String, String, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}, Vector{Dict}, GUI}} where T<:TimeStruct.TimeProfile","page":"Reference","title":"EnergyModelsGUI.add_description!","text":"add_description!(\n    field::T,\n    name::String,\n    key_str::String,\n    pre_desc::String,\n    node::Plotable,\n    available_data::Vector{Dict},\n    gui::GUI,\n) where {T<:TS.TimeProfile}\n\nUpdate the container with a description if available, and add description to available_data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.add_inspector_to_poly!-Tuple{MakieCore.AbstractPlot, Function}","page":"Reference","title":"EnergyModelsGUI.add_inspector_to_poly!","text":"add_inspector_to_poly!(p::Makie.AbstractPlot, inspector_label::Function)\n\nAdd inspector_label for Poly and Mesh plots in plot p.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.adjust_limits!-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.adjust_limits!","text":"adjust_limits!(gui::GUI)\n\nAdjust the limits of gui.axes[:topo] based on its content.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.align-Tuple{GUI, Symbol}","page":"Reference","title":"EnergyModelsGUI.align","text":"align(gui::GUI, type::Symbol)\n\nAlign components in gui.vars[:selected_systems] based on the value of Symbol type.\n\nThe following values are allowed\n\n:horizontal for horizontal alignment.\n:vertical for vertical alignment.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.angle-Tuple{EnergySystemDesign, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.angle","text":"angle(node_1::EnergySystemDesign, node_2::EnergySystemDesign)\n\nBased on the location of node_1 and node_2, return the angle between the x-axis and node_2 with node_1 being the origin.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.angle_difference-Tuple{Any, Any}","page":"Reference","title":"EnergyModelsGUI.angle_difference","text":"angle_difference(angle1, angle2)\n\nCompute the difference between two angles.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.box-Tuple{Real, Real, Real}","page":"Reference","title":"EnergyModelsGUI.box","text":"function box(x, y, Î)\n\nGet the coordinates of a box with half side lengths Î and centered at (x,y) starting at the upper right corner.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.clear_selection-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.clear_selection","text":"clear_selection(gui::GUI; clear_topo=true, clear_results=true)\n\nClear the color selection of components within 'gui.design' instance and reset the gui.vars[:selected_systems] variable.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.connect!-Tuple{GUI, EnergyModelsGUI.Connection, Bool}","page":"Reference","title":"EnergyModelsGUI.connect!","text":"connect!(gui::GUI, connection::Connection, two_way::Bool)\n\nWhen a boolean argument two_way is specified, draw the lines in both directions.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.connect!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.connect!","text":"connect!(gui::GUI, design::EnergySystemDesign)\n\nDraws lines between connected nodes/areas in GUI gui using EnergySystemDesign design.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.create_label-Tuple{Dict{Symbol, Any}}","page":"Reference","title":"EnergyModelsGUI.create_label","text":"create_label(selection::Vector{Any})\n\nReturn a label for a given selection to be used in the gui.menus[:available_data] menu.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.create_makie_objects-Tuple{Dict, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.create_makie_objects","text":"create_makie_objects(vars::Dict, design::EnergySystemDesign)\n\nCreate Makie figure and all its objects (buttons, menus, toggles and axes) for EnergySystemDesign design and the options vars.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.define_event_functions-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.define_event_functions","text":"define_event_functions(gui::GUI)\n\nDefine event functions (handling button clicks, plot updates, etc.) for the GUI gui.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.design_file-Tuple{Dict, String}","page":"Reference","title":"EnergyModelsGUI.design_file","text":"design_file(system::Dict, path::String)\n\nConstruct the path for the .yml file for system in the folder path.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.draw_box!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.draw_box!","text":"draw_box!(gui::GUI, design::EnergySystemDesign)\n\nDraw a box for EnergySystemDesign design and it's appearance, including style, color, size.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.draw_icon!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.draw_icon!","text":"draw_icon!(gui::GUI, design::EnergySystemDesign)\n\nDraw an icon for EnergySystemDesign design.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.draw_label!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.draw_label!","text":"draw_label!(gui::GUI, component::EnergySystemDesign)\n\nAdd a label to an EnergySystemDesign component.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.exists-Tuple{JuMP.Containers.DenseAxisArray, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}}","page":"Reference","title":"EnergyModelsGUI.exists","text":"exists(data::JuMP.Containers.DenseAxisArray, node::Plotable)\n\nCheck if node exist in the data structure.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.exists-Tuple{Union{JuMP.Containers.SparseAxisArray, SparseVariables.IndexedVarArray}, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}}","page":"Reference","title":"EnergyModelsGUI.exists","text":"exists(data::SparseVars, node::Plotable)\n\nCheck if node exist in the data structure.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.export_svg-Tuple{Makie.Block, String}","page":"Reference","title":"EnergyModelsGUI.export_svg","text":"export_svg(ax::Makie.Block, filename::String)\n\nExport the ax to a .svg file with path given by filename.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.export_to_file-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.export_to_file","text":"export_to_file(gui::GUI)\n\nExport results based on the state of gui.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.export_xlsx-Tuple{JuMP.Model, String}","page":"Reference","title":"EnergyModelsGUI.export_xlsx","text":"export_xlsx(plots::Makie.AbstractPlot, filename::String)\n\nExport the plot plots to an xlsx file with path given by filename.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.export_xlsx-Tuple{Vector, String, Symbol}","page":"Reference","title":"EnergyModelsGUI.export_xlsx","text":"export_xlsx(plots::Vector, filename::String, xlabel::Symbol)\n\nExport the plots to a .xlsx file with path given by filename and top header xlabel.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.extract_combinations!-Tuple{GUI, Vector{Dict}, Symbol, Any}","page":"Reference","title":"EnergyModelsGUI.extract_combinations!","text":"extract_combinations!(\n    gui::GUI,\n    available_data::Vector{Dict},\n    dict::Symbol,\n    model\n)\n\nExtract all available resources in model[dict]\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.extract_combinations!-Tuple{GUI, Vector{Dict}, Symbol, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}, Any}","page":"Reference","title":"EnergyModelsGUI.extract_combinations!","text":"extract_combinations!(available_data::Vector{Dict}, dict::Symbol, node::Plotable, model)\n\nExtract all available resources in model[dict] for a given node.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.find_icon-Tuple{Dict, Dict}","page":"Reference","title":"EnergyModelsGUI.find_icon","text":"find_icon(system::Dict, id_to_icon_map::Dict)\n\nFind the icon associated with a given system's node id utilizing the mapping provided through id_to_icon_map.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.find_min_max_coordinates-Tuple{EnergySystemDesign, Vararg{Number, 4}}","page":"Reference","title":"EnergyModelsGUI.find_min_max_coordinates","text":"find_min_max_coordinates(\n    design::EnergySystemDesign,\n    min_x::Number,\n    max_x::Number,\n    min_y::Number,\n    max_y::Number\n)\n\nFind the minimum and maximum coordinates of the components of EnergySystemDesign design given the minimum and maximum coordinates min_x, min_y, max_x, and max_y.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.find_min_max_coordinates-Tuple{EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.find_min_max_coordinates","text":"find_min_max_coordinates(design::EnergySystemDesign)\n\nFind the minimum and maximum coordinates of the components of EnergySystemDesign design.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.find_type_field-Tuple{Dict, Any}","page":"Reference","title":"EnergyModelsGUI.find_type_field","text":"find_type_field(dict::Dict, x::Any)\n\nReturn closest supertype of a key being of same type as x.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_change-Tuple{GUI, Val}","page":"Reference","title":"EnergyModelsGUI.get_change","text":"get_change(::GUI, ::Val)\n\nHandle different keyboard inputs (events) and return changes in x, y coordinates in the design object gui.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_data-Tuple{JuMP.Model, Dict, TimeStruct.TimeStructure, Int64, Int64, Int64}","page":"Reference","title":"EnergyModelsGUI.get_data","text":"get_data(\n    model::JuMP.Model,\n    selection::Dict{Symbol, Any},\n    T::TS.TimeStructure,\n    sp::Int64,\n    rp::Int64\n    sc::Int64,\n)\n\nGet the values from the JuMP model or the input data for at selection for all times T restricted to strategic period sp, representative period rp, and scenario sc.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_default_colors-Tuple{}","page":"Reference","title":"EnergyModelsGUI.get_default_colors","text":"get_default_colors()\n\nGet the default colors in the EnergyModelsGUI repository at src/colors.yml.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_hover_string-Tuple{Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}}","page":"Reference","title":"EnergyModelsGUI.get_hover_string","text":"get_hover_string(node::Plotable)\n\nReturn the string for a Node/Area/Link/Transmission to be shown on hovering.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_jump_axis_types-Tuple{JuMP.Containers.DenseAxisArray}","page":"Reference","title":"EnergyModelsGUI.get_jump_axis_types","text":"get_jump_axis_types(data::JuMP.Containers.DenseAxisArray)\n\nGet the types for each axis in the data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_jump_values-Tuple{JuMP.Model, Symbol, Vector, Vector, Int64}","page":"Reference","title":"EnergyModelsGUI.get_jump_values","text":"get_jump_values(\n    model::JuMP.Model, var::Symbol, selection::Vector, t_values::Vector, i_T::Int64\n)\n\nGet the values from the JuMP model for symbol var at selection for all times T restricted to sp\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_linestyle-Tuple{GUI, EnergyModelsGUI.Connection}","page":"Reference","title":"EnergyModelsGUI.get_linestyle","text":"get_linestyle(gui::GUI, connection::Connection)\n\nGet the line style for an Connection connection based on its properties.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_linestyle-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.get_linestyle","text":"get_linestyle(gui::GUI, design::EnergySystemDesign)\n\nGet the line style for an EnergySystemDesign design based on its properties.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_linked_nodes!-Tuple{EnergyModelsBase.Node, Dict{Symbol, Any}, Vector{Link}, Vector{EnergyModelsBase.Node}, Vector{Int64}}","page":"Reference","title":"EnergyModelsGUI.get_linked_nodes!","text":"get_linked_nodes!(node::EMB.Node,\n    system::Dict{Symbol, Any},\n    links::Vector{EMB.Link},\n    nodes::Vector{EMB.Node},\n    indices::Vector{Int})\n\nRecursively find all nodes connected (directly or indirectly) to node in a system system and store the found links in links and nodes in nodes.\n\nHere, indices contains the indices where the next link and node is to be stored, respectively.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_nested_value-Tuple{Dict, String}","page":"Reference","title":"EnergyModelsGUI.get_nested_value","text":"get_nested_value(dict::Dict, keys_str::String)\n\nGet value of a nested dict based on keys in the string key_str separated by periods.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_nth_field-Tuple{String, Char, Int64}","page":"Reference","title":"EnergyModelsGUI.get_nth_field","text":"get_nth_field(s::String, delimiter::Char, n::Int)\n\nGet n'th value of a string s separated by the character delimiter.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_op-Tuple{TimeStruct.TimePeriod}","page":"Reference","title":"EnergyModelsGUI.get_op","text":"get_op(tp::TS.TimePeriod)\n\nGet the operational period of TimePeriod tp.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_representative_period_indices-Tuple{TimeStruct.TimeStructure, Int64}","page":"Reference","title":"EnergyModelsGUI.get_representative_period_indices","text":"get_representative_period_indices(T::TS.TimeStructure, sp::Int64)\n\nReturn indices in the time structure T of the representative periods for strategic period sp.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_resource_colors-Tuple{Link, Dict{Any, Any}}","page":"Reference","title":"EnergyModelsGUI.get_resource_colors","text":"get_resource_colors(l::Vector{EMB.Link}, id_to_color_map::Dict{Any,Any})\n\nGet the colors linked to the resources in the link l based on the mapping id_to_color_map.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_resource_colors-Tuple{Transmission, Dict{Any, Any}}","page":"Reference","title":"EnergyModelsGUI.get_resource_colors","text":"get_resource_colors(l::Vector{EMG.Transmission}, id_to_color_map::Dict{Any,Any})\n\nGet the colors linked to the resources in the transmission l (from modes(Transmission)) based on the mapping id_to_color_map\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_resource_colors-Tuple{Vector{Any}, Dict{Any, Any}}","page":"Reference","title":"EnergyModelsGUI.get_resource_colors","text":"get_resource_colors(::Vector{Any}, ::Dict{Any,Any})\n\nReturn empty RGB vector for empty input.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_resource_colors-Union{Tuple{T}, Tuple{Vector{T}, Dict{Any, Any}}} where T<:Resource","page":"Reference","title":"EnergyModelsGUI.get_resource_colors","text":"get_resource_colors(resources::Vector{EMB.Resource}, id_to_color_map::Dict{Any,Any})\n\nGet the colors linked the the resources in resources based on the mapping id_to_color_map.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_scenario_indices-Tuple{TimeStruct.TimeStructure, Int64, Int64}","page":"Reference","title":"EnergyModelsGUI.get_scenario_indices","text":"get_scenario_indices(T::TS.TimeStructure, sp::Int64, rp::Int64)\n\nReturn indices of the scenarios in the time structure T for strategic period number sp and representative period rp\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_sector_points-Tuple{}","page":"Reference","title":"EnergyModelsGUI.get_sector_points","text":"get_sector_points(;\n    center::Tuple{Real,Real} = (0.0, 0.0),\n    Î::Real = 1.0,\n    Î¸â::Real = 0,\n    Î¸â::Real = Ï/4,\n    steps::Int=200,\n    type::Symbol = :circle)\n\nGet points for the boundary of a sector defined by the center c, radius/halfsidelength Î, and angles Î¸â and Î¸â for a square (type = :rect), a circle (type = :circle), or a triangle (type = :triangle).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_supertypes-Tuple{Any}","page":"Reference","title":"EnergyModelsGUI.get_supertypes","text":"get_supertypes(x::Any)\n\nReturn the vector of the supertypes of x.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_text_alignment-Tuple{Symbol}","page":"Reference","title":"EnergyModelsGUI.get_text_alignment","text":"get_text_alignment(wall::Symbol)\n\nGet the text alignment for a label attached to a wall\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_time_axis-Tuple{Union{JuMP.Containers.DenseAxisArray, JuMP.Containers.SparseAxisArray, SparseVariables.IndexedVarArray}}","page":"Reference","title":"EnergyModelsGUI.get_time_axis","text":"get_time_axis(\n    data::Union{\n        JuMP.Containers.DenseAxisArray,\n        JuMP.Containers.SparseAxisArray,\n        SparseVariables.IndexedVarArray,\n    },\n)\n\nGet the index of the axis/column corresponding to TS.TimePeriod and return the specific type.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.get_time_values-Tuple{TimeStruct.TimeStructure, Type, Int64, Int64, Int64}","page":"Reference","title":"EnergyModelsGUI.get_time_values","text":"get_time_values(\n    T::TS.TimeStructure, type::Type, sp::Int64, rp::Int64, sc::Int64\n)\n\nGet the time values for a given time type (TS.StrategicPeriod, TS.RepresentativePeriod or TS.OperationalPeriod)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.getfirst-Tuple{Function, Vector}","page":"Reference","title":"EnergyModelsGUI.getfirst","text":"getfirst(f::Function, a::Vector)\n\nReturn the first element of Vector a satisfying the requirement of Function f.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.hideplots!-Tuple{Vector}","page":"Reference","title":"EnergyModelsGUI.hideplots!","text":"hidesplots!(plots::Vector)\n\nHide all plots in plots.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.initialize_available_data!-Tuple{Any}","page":"Reference","title":"EnergyModelsGUI.initialize_available_data!","text":"initialize_available_data!(gui)\n\nFor all plotable objects, initialize the available data menu with items.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.initialize_plot!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.initialize_plot!","text":"initialize_plot!(gui::GUI, design::EnergySystemDesign)\n\nInitialize the plot of the topology of design object gui given an EnergySystemDesign design.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.installed-Tuple{}","page":"Reference","title":"EnergyModelsGUI.installed","text":"function installed()\n\nGet a list of installed packages (from the depricated Pkg.installed())\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.new_global_delta_h-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.new_global_delta_h","text":"new_global_delta_h(gui::GUI)\n\nRecalculate the sizes of the boxes in gui.axes[:topo] such that their size is independent of zooming an resizing the window.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.norm-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Real","page":"Reference","title":"EnergyModelsGUI.norm","text":"norm(x::Vector{T}) where T<:Real\n\nCompute the l2-norm of a vector.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.pick_component!-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.pick_component!","text":"pick_component!(gui::GUI)\n\nCheck if a system is found under the mouse pointer and if it is an EnergySystemDesign and update state variables.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.pixel_to_data-Tuple{GUI, Real}","page":"Reference","title":"EnergyModelsGUI.pixel_to_data","text":"pixel_to_data(gui::GUI, pixel_size::Real)\n\nConvert pixel_size to data widths (in x- and y-direction) in design object gui.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.place_nodes_in_circle-Tuple{Int64, Int64, Real, Real, Real}","page":"Reference","title":"EnergyModelsGUI.place_nodes_in_circle","text":"place_nodes_in_circle(total_nodes::Int, current_node::Int, r::Real, xâ::Real, yâ::Real)\n\nReturn coordinate for point number i of a total of n points evenly distributed around a circle of radius r centered at (xâ, yâ) from -Ï/4 to 5Ï/4.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.plot_design!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.plot_design!","text":"plot_design!(\n    gui::GUI, design::EnergySystemDesign; visible::Bool=true, expand_all::Bool=true\n)\n\nPlot the topology of gui.design (only if not already available), and toggle visibility based on the optional argument visible.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.process_children!-Union{Tuple{T}, Tuple{Vector{EnergySystemDesign}, Dict, Dict, String, Dict, Dict, Symbol, Observables.Observable{Tuple{T, T}}}} where T<:Real","page":"Reference","title":"EnergyModelsGUI.process_children!","text":"process_children!(...)\n\nProcesses children or components within an energy system design and populates the children vector.\n\nArguments:\n\nchildren::Vector{EnergySystemDesign} is a vector to store child EnergySystemDesign instances.\nsystems::Dict is the system configuration data represented as a dictionary.\ndesign_dict::Dict is a dictionary containing design-specific data.\ndesign_path::String is a file path or identifier related to the design.\nparent::Symbol is a symbol representing the parent of the children.\nparent_xy::Observable{Tuple{T,T}} is an observable tuple holding the coordinates of the parent, where T is a subtype of Real.\nkwargs...: Additional keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.save_design-Tuple{Dict, String}","page":"Reference","title":"EnergyModelsGUI.save_design","text":"save_design(design::EnergySystemDesign, file::String)\n\nSave the x,y-coordinates of design_dict to a .yml file at location and filename given by file.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.save_design-Tuple{EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.save_design","text":"save_design(design::EnergySystemDesign)\n\nSave the x,y-coordinates of EnergySystemDesign design to a .yml file specifield in the field file of design.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.showdecorations!-Tuple{Any}","page":"Reference","title":"EnergyModelsGUI.showdecorations!","text":"showdecorations!(ax)\n\nShow all decorations of ax.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.showplots!-Tuple{Vector}","page":"Reference","title":"EnergyModelsGUI.showplots!","text":"showplots!(plots::Vector)\n\nShow all plots in plots.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.showspines!-Tuple{Any}","page":"Reference","title":"EnergyModelsGUI.showspines!","text":"showspines!(ax)\n\nShow all four spines (frame) of ax.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.square_intersection-Union{Tuple{TÎ}, Tuple{TÎ¸}, Tuple{Tc}, Tuple{Tuple{Tc, Tc}, TÎ¸, TÎ}} where {Tc<:Real, TÎ¸<:Real, TÎ<:Real}","page":"Reference","title":"EnergyModelsGUI.square_intersection","text":"square_intersection(\n    c::Tuple{Tc, Tc},\n    Î¸::TÎ¸, Î::TÎ\n) where {Tc<:Real, Tx<:Real, TÎ¸<:Real, TÎ<:Real}\n\nCalculate the intersection point between a line starting at c and direction described by Î¸ and a square with half side lengths Î centered at center c.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.square_intersection-Union{Tuple{TÎ}, Tuple{TÎ¸}, Tuple{Tx}, Tuple{Tc}, Tuple{Vector{Tc}, Vector{Tx}, TÎ¸, TÎ}} where {Tc<:Real, Tx<:Real, TÎ¸<:Real, TÎ<:Real}","page":"Reference","title":"EnergyModelsGUI.square_intersection","text":"square_intersection(\n    c::Vector{Tc}, x::Vector{Tx},\n    Î¸::TÎ¸, Î::TÎ\n) where {Tc<:Real, Tx<:Real, TÎ¸<:Real, TÎ<:Real}\n\nCalculate the intersection point between a line starting at x and direction described by Î¸ and a square with half side lengths Î centered at center c.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.stepify-Union{Tuple{T}, Tuple{S}, Tuple{Vector{S}, Vector{T}}} where {S<:Number, T<:Number}","page":"Reference","title":"EnergyModelsGUI.stepify","text":"stepify(x::Vector{S},\n    y::Vector{T};\n    start_at_zero::Bool = true\n) where {S <: Number, T <: Number}\n\nFor a data set (x,y) add intermediate points to obtain a stepwise function and add a point at zero if start_at_zero = true\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.toggle_inspector!-Tuple{MakieCore.AbstractPlot, Bool}","page":"Reference","title":"EnergyModelsGUI.toggle_inspector!","text":"toggle_inspector!(p::Makie.AbstractPlot, toggle::Bool)\n\nToggle the inspector of a Makie plot p using the boolean toggle.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.toggle_selection_color!-Tuple{GUI, EnergySystemDesign, Bool}","page":"Reference","title":"EnergyModelsGUI.toggle_selection_color!","text":"toggle_selection_color!(gui::GUI, selection, selected::Bool)\n\nSet the color of selection to gui.vars[:selection_color] if selected, and its original color otherwise using the argument selected.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update!-Tuple{GUI, EnergyModelsGUI.Connection}","page":"Reference","title":"EnergyModelsGUI.update!","text":"update!(gui::GUI, connection::Connection; updateplot::Bool=true)\n\nBased on connection.connection, update the text in gui.axes[:info] and update plot in gui.axes[:results] if updateplot = true\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.update!","text":"update!(gui::GUI, design::EnergySystemDesign; updateplot::Bool=true)\n\nBased on design.system[:node], update the text in gui.axes[:info] and update plot in gui.axes[:results] if updateplot = true\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update!-Tuple{GUI, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}}","page":"Reference","title":"EnergyModelsGUI.update!","text":"update!(gui::GUI, node::Plotable; updateplot::Bool=true)\n\nBased on node, update the text in gui.axes[:info] and update plot in gui.axes[:results] if updateplot = true\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update!-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.update!","text":"update!(gui::GUI)\n\nUpon release of left mouse button update plots.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_available_data_menu!-Tuple{GUI, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}}","page":"Reference","title":"EnergyModelsGUI.update_available_data_menu!","text":"update_available_data_menu!(gui::GUI, node::Plotable)\n\nUpdate the gui.menus[:available_data] with the available data of node.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_barplot_dodge!-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.update_barplot_dodge!","text":"update_barplot_dodge!(gui::GUI)\n\nUpdate the barplot of the state of the GUI (such that the bars are dodged away from each other)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_distances!-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.update_distances!","text":"update_distances!(gui::GUI)\n\nFind the minimum distance between the nodes in the design object gui and update Îh such that neighbouring icons do not overlap.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_info_box!-Tuple{GUI, Any}","page":"Reference","title":"EnergyModelsGUI.update_info_box!","text":"update_info_box!(gui::GUI, node; indent::Int64=0)\n\nBased on node update the text in gui.axes[:info]\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_legend!-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.update_legend!","text":"update_legend!(gui::GUI)\n\nUpdate the legend based on the visible plots of type axis_time_type\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_limits!-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.update_limits!","text":"update_limits!(gui::GUI)\n\nUpdate the limits based on the visible plots of type axis_time_type\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_plot!-Tuple{GUI, EnergyModelsGUI.Connection}","page":"Reference","title":"EnergyModelsGUI.update_plot!","text":"update_plot!(gui::GUI, design::EnergySystemDesign)\n\nBased on connection.connection update the results in gui.axes[:results]\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_plot!-Tuple{GUI, EnergySystemDesign}","page":"Reference","title":"EnergyModelsGUI.update_plot!","text":"update_plot!(gui::GUI, design::EnergySystemDesign)\n\nBased on design.system[:node] update the results in gui.axes[:results]\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_plot!-Tuple{GUI, Union{Nothing, Link, EnergyModelsBase.Node, Area, Transmission, TransmissionMode}}","page":"Reference","title":"EnergyModelsGUI.update_plot!","text":"update_plot!(gui::GUI, node)\n\nBased on node update the results in gui.axes[:results].\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_sub_system_locations!-Tuple{EnergySystemDesign, Tuple{Real, Real}}","page":"Reference","title":"EnergyModelsGUI.update_sub_system_locations!","text":"update_sub_system_locations!(design::EnergySystemDesign, Î::Tuple{Real,Real})\n\nUpdate the coordinates of a subsystem of design based on the movement of EnergySystemDesign design.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGUI.update_title!-Tuple{GUI}","page":"Reference","title":"EnergyModelsGUI.update_title!","text":"update_title!(gui::GUI)\n\nUpdate the title of gui.axes[:topo] based on gui.design.\n\n\n\n\n\n","category":"method"},{"location":"manual/NEWS/#Release-notes","page":"Release notes","title":"Release notes","text":"","category":"section"},{"location":"manual/NEWS/#Unversioned","page":"Release notes","title":"Unversioned","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Redirect stdout to avoid redundant printouts during testing","category":"page"},{"location":"manual/NEWS/#Version-0.5.0-(2024-04-19)","page":"Release notes","title":"Version 0.5.0 (2024-04-19)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted default colors (for resources) to be that of Matplotlib.\nRemoved empty and/or redundant sheets from excel exports.\nRenamed the navigate up button to back and moved it to the far left (to get a browser feel). The open button was moved correspondingly.\nPlot comonents and lines in layers such that components are uniquely layered on top of each other and always above any line.\nUse dashed linestyle for area components that has nodes with investment.\nFor transmissions, only use dashed linestyle if the transmission itself has investments.\nUpdated to EnergyModelsBase@0.7.0, EnergyModelsGeography@0.9.0, EnergyModelsInvestments@0.6.0 and TimeStruct@0.8.0.\nRestructured how descriptive names are read from the descriptive_names.yml file.\nAdded the type Connection to replace the type Tuple{EnergySystemDesign,EnergySystemDesign,Dict}.\nRemoved redundant functions, use the plots variable naming convention instead of plot_objs.","category":"page"},{"location":"manual/NEWS/#Bugfix","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed issue of non-updating doges for barplots when removing bars.\nFixed bug of Wireframes being included in gui.vars[:visiblePlots].\nFix bug when exporting barplot data to the REPL PrettyTables.\nFix error when exporting plots to excel files.\nResolve bug when two components are close together which resulted in singular behaviour.\nFixed bug for default icon setup for Source with multiple Resources.\nFixed bug when trying to read model results with termination_status(gui.model) != MOI.OPTIMAL.\nFixed bug that for multiple selected plots did not go back to its original colors when deselected.","category":"page"},{"location":"manual/NEWS/#Enhancement","page":"Release notes","title":"Enhancement","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Code has been formatted using JuliaFormatter (with style = \"blue\").\nConverted variable names form lower camelCase to snake_case (breaking).\nDivided the GUI() function into smaller functions.\nImproved the documentation to include explanation of the functionality of the GUI.\nAdded a new example, case7, that show case more features of EMX and the GUI.\nAdded more tests that focuses on specific GUI functionalities (currently 91.15 % coverage).\nAdded .lp and .mps file export options.\nAdd clear all (button) functionality.","category":"page"},{"location":"manual/NEWS/#Feature","page":"Release notes","title":"Feature","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The GUI window can now be closed with the shortcut ctrl+w.\nAdd functionality to provide own descriptions and extended descriptions to the EnergyModelsRenewableProducers and EnergyModelsHydrogen packages.","category":"page"},{"location":"manual/NEWS/#Version-0.4.2-(2024-03-19)","page":"Release notes","title":"Version 0.4.2 (2024-03-19)","text":"","category":"section"},{"location":"manual/NEWS/#Bugfix-2","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fix issue when aligning selections of node including links/transmissions.\nFix issue for plotting the topology having Areas with only the availability node present.","category":"page"},{"location":"manual/NEWS/#Enhancement-2","page":"Release notes","title":"Enhancement","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Improved documentation of the GUI constructor and provided more optional arguments.\nImproved performance be precomputing the available data for all objects such that choosing from the Data menu now performs better.","category":"page"},{"location":"manual/NEWS/#Feature-2","page":"Release notes","title":"Feature","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The fontsize can now be adjusted as an input argument to the GUI constructor.","category":"page"},{"location":"manual/NEWS/#Version-0.4.1-(2024-03-15)","page":"Release notes","title":"Version 0.4.1 (2024-03-15)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-2","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The print table functionality is now available through the export button with the REPL option.\nThe Save functionality also loops through sub-systems (since changing coordinates of sub-components is enabled through the Expand all toggle).","category":"page"},{"location":"manual/NEWS/#Bugfix-3","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed issue with pinned and visible plots not being properly overwritten.\nFixed issue with setting expandAll = true in the input argument for GUI.\nFix issuewith non-existing export folder.","category":"page"},{"location":"manual/NEWS/#Feature-3","page":"Release notes","title":"Feature","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Added functionality to export all JuMP variables to an excel file.\nAdded functionality to export all JuMP variables to the REPL using PrettyTables.","category":"page"},{"location":"manual/NEWS/#Version-0.4.0-(2024-03-12)","page":"Release notes","title":"Version 0.4.0 (2024-03-12)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-3","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"For StrategicPeriods and RepresentativePeriods, plot the object string from the Base.Show() function instead of the corresponding integers.\nRemoved redundant dependencies in the Project.toml file.\nOne can now hide decorations (gridlines and ticks) in axes[:topo] by using the GUI input argument hideTopoAxDecorations (default is set to true).\nUse two triangles connected by a juncture for NetworkNodes to make the shape different from the circle used for Sinks. The left triangle represent input Resources and the right triangle represents output Resources.\nBreaking: Avoided CamelCase naming convention for function to be more alligned with the EMX naming convention.\nPlots are no longer auto selected (user must manually pick from Available data) to improve performance.\nAdjusted the tags Electricity and Gas to be Power and NG in the colors.toml file to be more in line with the EMX exampels..\nAdded option to use coarse coastlines (the coarseCoastlines is by default set to true) for performance.","category":"page"},{"location":"manual/NEWS/#Bugfix-4","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fix zooming bug in gui.axes[:info].\nFix issue plotting results over RepresentativePeriods.\nFix bug for modes of type PipeSimple.\nFixed bug of collapsed lines when a connection is not twoWay.\nFixed bug that did not toggle back highlighting of the \"open\" button after click.\nCorrected path to EMX packages for icon location (ext/EMGUIExt/icons).\nFixed 404 issue for high resolution geographical land data.","category":"page"},{"location":"manual/NEWS/#Enhancement-3","page":"Release notes","title":"Enhancement","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Colors can now be provided as a dict for selected Resources and if not provided the GUI will look through the colors.toml file for colors if same keys are used (otherwise an algorithm will fill in the missing colors based on the provided colors in order to be optimally distinct).\nBy default, colors are now extracted automatically from the src/colors.toml file based on the id of the Resource (effectively removing the need of providing the idToColorMap input argument to get decent colors for most examples).\nIcons can now be provided in the form of a Dict that enables the user to only provide icons for a selected number of nodes. Moreover, the user can provide links for types (like Sink or NetworkNode). An example of this is provided in examples/EMB_network.jl.\nDocumentation on how to customize icons and colors was added.","category":"page"},{"location":"manual/NEWS/#Feature-4","page":"Release notes","title":"Feature","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"You can now use Button4 (used in i.e. browsers to go back to previous page) to go back to the TopLevel of the design (as an alternative to the Esc button).\nDouble-clicking a node now opens its sub-system.\nCustomized labels can now be provided for the different time structures.\nPlot data can now be exported to bit-map formats and to vector formats (.svg and .pdf).\nFor Areas, an \"Expand all\" toggle functionality has been added to visualize all sub-systems. All of the topology are drawn in the initializing process of the GUI which optimizes the performance in runtime.\nAdded the file descriptiveNames.yml which provides more descriptive names for the variables (used in the ylabel, legend and the Data menu).\nAdded functionality to print plotted values to a table in the REPL using the package PrettyTables.","category":"page"},{"location":"manual/NEWS/#Version-0.3.4-(2024-02-29)","page":"Release notes","title":"Version 0.3.4 (2024-02-29)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-4","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Alter description on how examples should be run (use a seperate Project.toml file from the examples folder instead of the test folder).","category":"page"},{"location":"manual/NEWS/#Bugfix-5","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed bug for investments in transition cables not being dashed\".","category":"page"},{"location":"manual/NEWS/#Enhancement-4","page":"Release notes","title":"Enhancement","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Improved component movements responsitivity.\nAdded internal types and methods to the documentation.","category":"page"},{"location":"manual/NEWS/#Version-0.3.3-(2024-02-26)","page":"Release notes","title":"Version 0.3.3 (2024-02-26)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-5","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The labels now only show the node id and only used the Base.show function if id is a Number. Moreover, the type (in parantheses) was removed (this info is now shown on hovering).","category":"page"},{"location":"manual/NEWS/#Bugfix-6","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed legends not properly updating (old legend was not deleted) for gui.axes[:results].","category":"page"},{"location":"manual/NEWS/#Enhancement-5","page":"Release notes","title":"Enhancement","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Support for RepresentativePeriods added.\nSupport for Scenarios added.\nAdded Makie inspector functionality such that hovering results axis displays coordinate and hovering topology shows type information.","category":"page"},{"location":"manual/NEWS/#Version-0.3.2-(2024-02-23)","page":"Release notes","title":"Version 0.3.2 (2024-02-23)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-6","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Changed the routine for finding the icons (icons in other EMX-packages are now expected to be found in ext/EMGUIExt/icons). All EMX-packages are assumed to have name starting with EnergyModels.\nHide Investment plan, segment and scenarios menus until they are implemented.\nIf idToColorMap is not provided, a set of colors is created from the default colors to be as distinct as possible.","category":"page"},{"location":"manual/NEWS/#Bugfix-7","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed a bug related to showing results for a Transmission.\nFixed a bug when dragging a node outside the gui.axes[:topo] area.","category":"page"},{"location":"manual/NEWS/#Enhancement-6","page":"Release notes","title":"Enhancement","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Input data from the case can now be plotted.\nCode readibility was improved for setupGUI.jl.\nThe tests now loop through all nodes/areas and their available data to check for errors.\nImproved structure of the examples.","category":"page"},{"location":"manual/NEWS/#Version-0.3.1-(2024-02-14)","page":"Release notes","title":"Version 0.3.1 (2024-02-14)","text":"","category":"section"},{"location":"manual/NEWS/#Bugfix-8","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fix CI malfunction resulting from LocalRegistry added in CI. LocalRegistry is now part of test project instead.","category":"page"},{"location":"manual/NEWS/#Version-0.3.0-(2024-02-14)","page":"Release notes","title":"Version 0.3.0 (2024-02-14)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-7","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The interactive option in the view() function has been removed due to lacking usage and maintenance.\nImproved visualization of connections.","category":"page"},{"location":"manual/NEWS/#Bugfix-9","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fix selection such that clicking on icons images results in node selection.\nFix bug when selecting a node not having parent that is :Toplevel.\nFix connection lines to be exactly at box boundary.\nFix bug that assumes that all nodes are connected to an availability node for a RefArea.\nFixed issue relating to reading x and y coordinates from toml file.\nEnabled visualization of sink/source to have more than one input/output.","category":"page"},{"location":"manual/NEWS/#Enhancement-7","page":"Release notes","title":"Enhancement","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Created a new structure for the GUI that simplifies construction and enables better control of the GUI.\nOpen sub system in same axis (not open in a new window) and store plot objects for efficiency.\nAdded axis to plot results and provided optional argument for passing the optimization results from JuMP\nAdded text area to show information on the selected object.\nImproved handling of colors and icons (direct path to icons can be provided, or alternatively names of the .png files which will then have to exist in the icons folder of any of the EMX packages).\nAdded tests that checks if the example files runs without errors.","category":"page"},{"location":"manual/NEWS/#Version-0.2.0-(2024-01-10)","page":"Release notes","title":"Version 0.2.0 (2024-01-10)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-8","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted to changes in EnergyModelsBase v0.6. These changes are mainly:","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"All fields of composite types are now lower case.","category":"page"},{"location":"manual/NEWS/#Bugfix-10","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fix selection such that clicking on icons images results in node selection.\nFix bug when selecting a node not having parent that is :Toplevel.","category":"page"},{"location":"manual/NEWS/#Version-0.1.1-(2024-01-09)","page":"Release notes","title":"Version 0.1.1 (2024-01-09)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-9","page":"Release notes","title":"Adjustment","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Make default icon be based on colors instead of icons based on node types.","category":"page"},{"location":"manual/NEWS/#Bugfix-11","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Zooming error due to GeoMakie resolved by deactivating zoom to area action.\nUpdate xy location of sub-systems when changing location of parent system.\nRemoved requirement for an Availability node.\nFixed bug that prevented more than two nodes to be selected.","category":"page"},{"location":"manual/NEWS/#Enhancement-8","page":"Release notes","title":"Enhancement","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Improved color handling by having a default behaviour based on the colors provided in the idToColorsMap dictionary\nImproved icon handling by having a default behaviour based on the colors provided. Enhancing users capability to add user defined icons in the idToIconsMap dictionary\nCreated a field in EnergySystemDesign named plotObj to store all plotted objects associated with a given design object. This enabled more precise selection of nodes.\nParameterized many parameters including selection color and scaling of boxes w.r.t. parent nodes\nAdjust limits of the axis to be consistent with a fixed aspect ratio (currently chosen to be 1:1)","category":"page"},{"location":"manual/NEWS/#Feature-5","page":"Release notes","title":"Feature","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"An example without an Availability node added (based on the source-sink example in EnergyModelsBase).\nProvide legends for the available resources for the current system in the upper left corner.\nAdded new icons.\nConnections now starts and ends at boundaries of boxes such that every line with arrows ends at the point of an arrow.\nBy default, if colors are provided, and if no icons are provided, the \"icons\" will be represented by geometric shapes based on type and colored by the given resources; Sources has a square shape colored by its resource, Sinks has a circle colored by its resource and Network nodes has a cake diagram structure, where the left cake pieces are colored by the input colors and the right cake pieces are colored by the output colors of the Network node..\nWhenever the root system does not use :areas, use standard coordinates (instead of GeoMakie coordinates).","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2023-12-08)","page":"Release notes","title":"Version 0.1.0 (2023-12-08)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Initial version.","category":"page"},{"location":"#EnergyModelsGUI.jl","page":"Home","title":"EnergyModelsGUI.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsGUI","category":"page"},{"location":"#EnergyModelsGUI","page":"Home","title":"EnergyModelsGUI","text":"Main module for EnergyModelsGUI.jl.\n\nThis module provides the graphical user interface for EnergyModelsX packages.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsX is an operational, multi nodeal energy system model, written in Julia. The model is based on the JuMP optimization framework. It is a multi carrier energy model, where the definition of the resources are fully up to the user of the model. One of the primary design goals was to develop a model that can eaily be extended with new functionality without the need to understand and remember every variable and constraint in the model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For running and visualizing a basic energy system model, only the base technology package EnergyModelsBase.jl, EnergyModelsGUI.jl and the time structure package TimeStruct.jl are needed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The EnergyModelsGUI package also provides visualization utilities for the following packages","category":"page"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsGeography.jl:  this package makes it possible to easily extend your energy model with different  geographic areas, where transmission can be set to allow for the transport of  resources between the different areas.\nEnergyModelsInvestments.jl:  this package implements functionality for investments, where the length of the  investment periods are fully flexible and is decided by setting the time  structure.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/philosophy.md\",\n    \"manual/simple-example.md\",\n    \"manual/NEWS.md\",\n]\nDepth = 1","category":"page"},{"location":"#How-to-guides","page":"Home","title":"How to guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"how-to/save-design.md\",\n    \"how-to/export-results.md\",\n    \"how-to/customize-colors.md\",\n    \"how-to/customize-icons.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public.md\",\n    \"library/internals/reference.md\",\n]\nDepth = 1","category":"page"},{"location":"library/public/#sec_lib_public","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"library/public/#GUI-constructor","page":"Public","title":"GUI constructor","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"EnergyModelsGUI.GUI(case::Dict)","category":"page"},{"location":"library/public/#EnergyModelsGUI.GUI-Tuple{Dict}","page":"Public","title":"EnergyModelsGUI.GUI","text":"GUI(case::Dict)\n\nInitialize the EnergyModelsGUI window and visualize the topology of a system case (and optionally visualize its results in a JuMP object model).\n\nArguments:\n\nsystem::case is a dictionary containing system-related data stored as key-value pairs. This dictionary is corresponding to the the EnergyModelsX case dictionary.\n\nKeyword arguments:\n\ndesign_path::String=\"\" is a file path or identifier related to the design\n**id_to_color_map::Dict=Dict() is a dict that maps Resources id to colors.\n**id_to_icon_map::Dict=Dict() is a dict that maps Node/Area id to .png files for icons.\nmodel::JuMP.Model=JuMP.Model() is the solved JuMP model with results for the case.\nhide_topo_ax_decorations::Bool=true is a visibility toggle of ticks, ticklabels and grids for the topology axis.\nexpand_all::Bool=false is the default option for toggling visibility of all nodes in all areas\nperiods_labels::Vector=[] are descriptive labels for strategic periods.\nrepresentative_periods_labels::Vector=[] are descriptive labels for the representative periods.\nscenarios_labels::Vector=[] are descriptive labels for scenarios.\npath_to_results::String=\"\" is the path to where exported files are stored.\n**path_to_descriptive_names::String=\"\" is the Path to a .yml file where JuMP variables are described\ncoarse_coast_lines::Bool=true is a toggle for coarse or fine resolution coastlines.\nbackgroundcolor=GLMakie.RGBf(0.99, 0.99, 0.99) is the background color of the main window\nfontsize::Int64=12 is the general fontsize.\nplot_widths::Tuple{Int64,Int64}=(1920, 1080) is the resolution of the window.\n\n\n\n\n\n","category":"method"},{"location":"library/public/#EnergySystemDesign-constructor","page":"Public","title":"EnergySystemDesign constructor","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"EnergyModelsGUI.EnergySystemDesign(system::Dict)","category":"page"},{"location":"library/public/#EnergyModelsGUI.EnergySystemDesign-Tuple{Dict}","page":"Public","title":"EnergyModelsGUI.EnergySystemDesign","text":"Create and initialize an instance of the EnergySystemDesign struct, representing energy system designs.\n\nArguments:\n\nsystem::Dict is a dictionary containing system-related data stored as key-value pairs.\n\nKeyword arguments:\n\ndesign_path::String=\"\" is a file path or identifier related to the design.\nx::Real=0.0 is the initial x-coordinate of the system.\ny::Real=0.0 is the initial y-coordinate of the system.\nicon::String=\"\" is the optional (path to) icons associated with the system, stored as a string.\nwall::Symbol=:E is an initial wall value.\nparent::Union{Symbol, Nothing}=nothing is a parent reference or indicator.\nkwargs... are additional keyword arguments that can be provided.\n\nThe function reads system configuration data from a TOML file specified by design_path (if it exists), initializes various internal fields, and processes connections and wall values.\n\nIt constructs and returns an EnergySystemDesign instance.\n\n\n\n\n\n","category":"method"},{"location":"library/public/#Structures","page":"Public","title":"Structures","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"EnergyModelsGUI.EnergySystemDesign\nEnergyModelsGUI.GUI","category":"page"},{"location":"library/public/#EnergyModelsGUI.EnergySystemDesign","page":"Public","title":"EnergyModelsGUI.EnergySystemDesign","text":"Mutable type for providing a flexible data structure for modeling and working with complex energy system designs in Julia.\n\nFields\n\nparent::Union{Symbol, Nothing} is the parent reference or indicator.\nsystem::Dict is the data related to the system, stored as key-value pairs.\nid_to_color_map::Dict is a dictionary of resources and their assigned colors.\nid_to_icon_map::Dict is a dictionary of nodes and their assigned icons.\ncomponents::Vector{EnergySystemDesign} is the components of the system, stored as an array of EnergySystemDesign objects.\nconnections::Vector{Connection} are the connections between system parts.\nxy::Observable{Tuple{Real,Real}} are the coordinates of the system, observed for changes.\nicon::String is the optional (path to) icons associated with the system, stored as a string.\ncolor::Observable{Symbol} is the color of the system, observed for changes and represented as a Symbol. The color is toggled to highlight system activation.\nwall::Observable{Symbol} represents an aspect of the system's state, observed for changes and represented as a Symbol.\nfile::String is the filename or path associated with the EnergySystemDesign.\nplots::Vector{Any} is a vector with all Makie object associated with this object. The value does not have to be provided.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsGUI.GUI","page":"Public","title":"EnergyModelsGUI.GUI","text":"The main type for the realization of the GUI.\n\nFields\n\nfig::Figure is the figure handle to the main figure (window).\naxes::Dict{Symbol,Axis} is a collection of axes: :topo (axis for visualizing the topology), :results (axis for plotting operation analaysis), and :info (axis for displaying information).\nbuttons::Dict{Symbol,Makie.Button} is a dictionary of the GLMakie buttons linked to the gui.axes[:topo] object.\nmenus::Dict{Symbol,Makie.Menu} is a dictionary of the GLMakie menus linked to the gui.axes[:results] object.\ntoggles::Dict{Symbol,Makie.Toggle} is a dictionary of the GLMakie toggles linked to the gui.axes[:results] object.\nroot_design::EnergySystemDesign is the data structure used for the root topology.\ndesign::EnergySystemDesign is the data structure used for visualizing the topology.\nmodel::Model contains the optimization results.\nvars::Dict{Symbol,Any} is a dictionary of miscellaneous variables and parameters.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#Utilities","page":"Public","title":"Utilities","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"EnergyModelsGUI.set_colors","category":"page"},{"location":"library/public/#EnergyModelsGUI.set_colors","page":"Public","title":"EnergyModelsGUI.set_colors","text":"set_colors(id_to_color_map::Dict{Any,Any}, products::Vector{S}, products_colors::Vector{T})\n\nReturns a dictionary that completes the dictionary id_to_color_map with default color values for standard names (like Power, NG, Coal, CO2) collected from src/colors.yml.\n\nColor can be represented as a hex (i.e., #a4220b2) or a symbol (i.e. :green), but also a string of the identifier for default colors in the src/colors.yml file.\n\n\n\n\n\n","category":"function"},{"location":"library/public/","page":"Public","title":"Public","text":"EnergyModelsGUI.set_icons","category":"page"},{"location":"library/public/#EnergyModelsGUI.set_icons","page":"Public","title":"EnergyModelsGUI.set_icons","text":"set_icons(id_to_icon_map::Dict)\n\nReturn a dictionary id_to_icon_map with id from nodes and icon paths based on provided paths (or name of .png icon file which will be found in the icons folder of any of the EMX packages).\n\nThe icon images are assumed to be in .png format, and the strings should not contain this file ending.\n\n\n\n\n\n","category":"function"}]
}
